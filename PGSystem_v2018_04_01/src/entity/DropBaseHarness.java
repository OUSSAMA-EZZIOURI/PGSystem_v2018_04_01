package entity;
// Generated 6 fï¿½vr. 2016 21:43:55 by Hibernate Tools 3.6.0

import __main__.GlobalMethods;
import __main__.GlobalVars;
import gui.packaging.PackagingVars;
import helper.Helper;
import java.util.List;
import javax.swing.JOptionPane;
import org.hibernate.Query;
import helper.HQLHelper;
import hibernate.DAO;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;

/**
 * BaseHarness generated by hbm2java
 */
@Entity
@Table(name = "drop_base_harness")
public class DropBaseHarness extends DAO implements java.io.Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "drop_base_harness_id_seq")
    @SequenceGenerator(name = "drop_base_harness_id_seq", sequenceName = "drop_base_harness_id_seq", allocationSize = 1)
    private Integer id;
    @Temporal(javax.persistence.TemporalType.TIMESTAMP)
    @Column(name = "create_time")
    private Date createTime;

    @Temporal(javax.persistence.TemporalType.TIMESTAMP)
    @Column(name = "write_time")
    private Date writeTime;
    
    @Temporal(javax.persistence.TemporalType.TIMESTAMP)
    @Column(name = "drop_time")
    private Date dropTime;

    @Column(name = "create_id")
    private int createId;

    @Column(name = "write_id")
    private int writeId;

    @Column(name = "harness_part")
    private String harnessPart;

    @Column(name = "counter")
    private String counter;

    @Column(name = "m_user")
    private String user;
    
    @Column(name = "create_user")
    private String createUser;

    @Column(name = "container_id", insertable = false, updatable = false, nullable = true)
    private int containerId;

    @ManyToOne(optional = true, cascade = CascadeType.ALL)
    private DropBaseContainer container;

    @Column(name = "pallet_number")
    private String palletNumber;

    @Column(name = "harness_type")
    private String harnessType;

    @Column(name = "drop_feedback")
    private String dropFeedback;
    
    @Column(name="std_time")
    private double stdTime;
    
    /**
     * Is the global area that englob many carrousels or fixed boards
     */
    @Column(name = "segment")
    private String segment;
    
    /**
     * Is the area where the harness is been produced, it can be a group of fixed board
     * or a carrousel
     */
    @Column(name = "workplace")
    private String workplace;

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "harness", cascade = CascadeType.ALL)
    private Set<DropBaseHarnessAdditionalBarecode> dropAdditionalBarcodes = new HashSet<DropBaseHarnessAdditionalBarecode>(0);

    public DropBaseHarness() {
    }

    public DropBaseHarness setDefautlVals() {
        /*
         Set default values of this object 
         from the global mode2_context values
         */
        this.createTime = this.dropTime = this.writeTime = GlobalMethods.getTimeStamp(null);
        this.createId = this.writeId = PackagingVars.context.getUser().getId();
        this.user = PackagingVars.context.getUser().getLogin();
        this.createUser = PackagingVars.context.getUser().getFirstName() + " " + PackagingVars.context.getUser().getLastName();
        return this;
    }

    public DropBaseHarness(String harnessPart, String counter, int containerId, DropBaseContainer container, String palletNumber, String harnessType, String dropFeedback, double stdTime) {
        this.createTime = this.dropTime = this.writeTime = GlobalMethods.getTimeStamp(null);
        this.createId = this.writeId = PackagingVars.context.getUser().getId();
        this.createUser = PackagingVars.context.getUser().getFirstName() + " " + PackagingVars.context.getUser().getLastName();
        this.user = PackagingVars.context.getUser().getLogin();
        this.harnessPart = harnessPart;
        this.counter = counter;
        this.containerId = containerId;
        this.container = container;
        this.palletNumber = palletNumber;
        this.harnessType = harnessType;
        this.dropFeedback = dropFeedback;
        this.stdTime = stdTime;
    }

    public DropBaseHarness(Date createTime, Date writeTime, Date dropTime, int createId, int writeId, String harnessPart, String counter, String user, String createUser, int containerId, String palletNumber, String harnessType, String dropFeedback, double stdTime) {
        this.createTime = createTime;
        this.writeTime = writeTime;
        this.dropTime = dropTime;
        this.createId = createId;
        this.writeId = writeId;
        this.harnessPart = harnessPart;
        this.counter = counter;
        this.user = user;
        this.createUser = createUser;
        this.containerId = containerId;
        this.palletNumber = palletNumber;
        this.harnessType = harnessType;
        this.dropFeedback = dropFeedback;
        this.stdTime = stdTime;
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Date getCreateTime() {
        return this.createTime;
    }

    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }

    public Date getWriteTime() {
        return this.writeTime;
    }

    public void setWriteTime(Date writeTime) {
        this.writeTime = writeTime;
    }

    public int getCreateId() {
        return this.createId;
    }

    public void setCreateId(int createId) {
        this.createId = createId;
    }

    public int getWriteId() {
        return this.writeId;
    }

    public void setWriteId(int writeId) {
        this.writeId = writeId;
    }

    public String getHarnessPart() {
        return this.harnessPart;
    }

    public void setHarnessPart(String harnessPart) {
        this.harnessPart = harnessPart;
    }

    public String getCounter() {
        return this.counter;
    }

    public void setCounter(String counter) {
        this.counter = counter;
    }

    public String getUser() {
        return this.user;
    }

    public void setUser(String user) {
        this.user = user;
    }

    public String getCreateUser() {
        return createUser;
    }

    public void setCreateUser(String createUser) {
        this.createUser = createUser;
    }        

    public int getContainerId() {
        return this.containerId;
    }

    public void setContainerId(int containerId) {
        this.containerId = containerId;
    }

    public String getPalletNumber() {
        return this.palletNumber;
    }

    public void setPalletNumber(String palletNumber) {
        this.palletNumber = palletNumber;
    }

    public DropBaseContainer getContainer() {
        return container;
    }

    public void setContainer(DropBaseContainer container) {
        this.container = container;
    }

    public String getHarnessType() {
        return harnessType;
    }

    public void setHarnessType(String harnessType) {
        this.harnessType = harnessType;
    }

    public String getDropFeedback() {
        return dropFeedback;
    }

    public void setDropFeedback(String dropFeedback) {
        this.dropFeedback = dropFeedback;
    }

    public Date getDropTime() {
        return dropTime;
    }

    public void setDropTime(Date dropTime) {
        this.dropTime = dropTime;
    }        

    public Set<DropBaseHarnessAdditionalBarecode> getHarnessAdditionalBarecodes() {
        return dropAdditionalBarcodes;
    }

    public void setHarnessAdditionalBarcodes(Set<DropBaseHarnessAdditionalBarecode> dropAdditionalBarcodes) {
        this.dropAdditionalBarcodes = dropAdditionalBarcodes;
    }

    public double getStdTime() {
        return stdTime;
    }

    public void setStdTime(double stdTime) {
        this.stdTime = stdTime;
    }

    public String getSegment() {
        return segment;
    }

    public void setSegment(String segment) {
        this.segment = segment;
    }

    public String getWorkplace() {
        return workplace;
    }

    public void setWorkplace(String workplace) {
        this.workplace = workplace;
    }        
        
    //######################################################################
    public List selectByHarnessPart(String hp) {
        Helper.startSession();
        Query query = Helper.sess.createQuery(HQLHelper.GET_HP_BY_HP);
        query.setParameter("hp", hp);
        Helper.log.info(query.getQueryString());
        Helper.sess.getTransaction().commit();
        return query.list();
    }

    public boolean checkCounterFormat(String counter) {
        System.out.println("checkCounterFormat");
        //Tester le format du compteur Fx      
        boolean flag = false;        
        for (String pattern : GlobalVars.DATAMATRIX_PATTERN_LIST) {
            if (counter.matches(pattern.trim())) {
                flag = true;
                break;
            }            
        }


        if (!counter.equals("") && flag==true) {
            return true;
        }
        else {
            Helper.log.info(String.format(Helper.ERR0005_HP_COUNTER_FORMAT, counter));
            return false;
        }
    }

    public static Boolean checkHarnessPartFormat(String hp) {
        //Tester le format du harness part        
        if (!hp.equals("") && hp.startsWith(GlobalVars.HARN_PART_PREFIX) && (hp.length() == GlobalVars.HARN_PART_LEN)) {
            return true;
        } else {
            //JOptionPane.showMessageDialog(null, String.format(Helper.ERR0003_HP_FORMAT), "Error", JOptionPane.ERROR_MESSAGE);
            Helper.log.info(String.format(Helper.ERR0003_HP_FORMAT, hp));
            return false;
        }
    }

    public DropBaseHarness getHarnessByCounter(String counter) {
        Helper.startSession();
        Query query = Helper.sess.createQuery(HQLHelper.GET_HP_BY_COUNTER);
        query.setParameter("counter", counter);
        Helper.log.info(query.getQueryString());
        Helper.sess.getTransaction().commit();

        if (query.list().size() == 0) {
            return null;
        } else {
            return (DropBaseHarness) query.list().get(0);
        }
    }

    public static boolean isCounterExist(String counter) {
        //Tester si le harness counter exist dans la base BaseHarness        
        Helper.log.info("Searching Harness counter [" + counter + "] in DropBaseHarness.");
        Helper.startSession();
        Query query = Helper.sess.createQuery(HQLHelper.GET_HP_BY_COUNTER);
        query.setParameter("counter", counter);
        Helper.log.info(query.getQueryString());
        Helper.sess.getTransaction().commit();
        if (query.list().isEmpty()) {
            return false;
        } else {
            return true;
        }
    }

    public static Boolean isHarnessPartExist(String hp) {
        //Tester si le harness part exist dans la base UCS        

        String[] part = hp.split(GlobalVars.HARN_PART_PREFIX);
        Helper.log.info("Searching Harness part [" + part[1] + "] in ConfigUCS: " + part[1]);
        List resultList = new ConfigUcs().select(part[1]);
        if (!resultList.isEmpty()) {
            return true;
        } else {
            JOptionPane.showMessageDialog(null, String.format(Helper.ERR0004_HP_NOT_FOUND, part[1]), "Error", JOptionPane.ERROR_MESSAGE);
            Helper.log.warning(String.format(Helper.ERR0004_HP_NOT_FOUND, part[1]));
            return false;
        }
    }

    @SuppressWarnings("UnusedAssignment")
    public String getCreateTimeString(String format) {
        if (format == null) {
            format = "yyyy-MM-dd HH:mm:ss";
        }
        DateFormat df = new SimpleDateFormat(format);
        return df.format(this.createTime);
    }

    @Override
    public String toString() {
        return "DropBaseHarness{" + "id=" + id + ", createTime=" + createTime + ", writeTime=" + writeTime + ", createId=" + createId + ", writeId=" + writeId + ", harnessPart=" + harnessPart + ", counter=" + counter + ", user=" + user + ", containerId=" + containerId + ", container=" + container + ", palletNumber=" + palletNumber + ", harnessType=" + harnessType + ", dropFeedback=" + dropFeedback + ", AdditionalBarcodes=" + dropAdditionalBarcodes + '}';
    }

}
