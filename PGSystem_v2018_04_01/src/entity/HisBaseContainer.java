package entity;
// Generated 6 fï¿½vr. 2016 21:43:55 by Hibernate Tools 3.6.0

import __main__.GlobalMethods;
import __main__.GlobalVars;
import gui.packaging.PackagingVars;
import hibernate.DAO;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;

/**
 * HisPalletPrint generated by hbm2java
 */
@Entity
@Table(name = "his_base_container")
public class HisBaseContainer extends DAO implements java.io.Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "his_base_container_id_seq")
    @SequenceGenerator(name = "his_base_container_id_seq", sequenceName = "his_base_container_id_seq", allocationSize = 1)
    private Integer id;
    @Temporal(javax.persistence.TemporalType.TIMESTAMP)
    @Column(name = "create_time")
    private Date createTime;

    @Temporal(javax.persistence.TemporalType.TIMESTAMP)
    @Column(name = "fifo_time")
    private Date fifoTime;

    @Column(name = "work_time")
    private Float workTime;

    @Column(name = "create_id")
    private int createId;

    @Column(name = "write_id")
    private int writeId;

    @Column(name = "pallet_number")
    private String palletNumber;

    @Column(name = "harness_part")
    private String harnessPart;

    @Column(name = "harness_index")
    private String harnessIndex;

    @Column(name = "supplier_part_number")
    private String supplierPartNumber;

    @Column(name = "qty_expected")
    private int qtyExpected;

    @Column(name = "qty_read")
    private int qtyRead;

    @Column(name = "pack_type")
    private String packType;

    @Column(name = "harness_type")
    private String harnessType;

    @Column(name = "container_state")
    private String containerState;

    @Column(name = "container_state_code")
    private String containerStateCode;

    @Column(name = "feedback")
    private String feedback;

    @Column(name = "m_user")
    private String user;
    
    @Column(name = "create_user")
    private String createUser;

    public HisBaseContainer() {
    }

    @Override
    public String toString() {
        return "HisBaseContainer{" + "id=" + id 
                + ",\n createTime=" + createTime 
                + ",\n fifoTime=" + fifoTime                 
                + ",\n workTime=" + workTime 
                + ",\n createId=" + createId 
                + ",\n writeId=" + writeId 
                + ",\n palletNumber=" + palletNumber 
                + ",\n harnessPart=" + harnessPart 
                + ",\n harnessIndex=" + harnessIndex 
                + ",\n supplierPartNumber=" + supplierPartNumber 
                + ",\n qtyExpected=" + qtyExpected 
                + ",\n qtyRead=" + qtyRead 
                + ",\n packType=" + packType 
                + ",\n harnessType=" + harnessType 
                + ",\n containerState=" + containerState 
                + ",\n containerStateCode=" + containerStateCode 
                + ",\n feedback=" + feedback 
                + ",\n createUser=" + createUser 
                + ",\n user=" + user + '}';
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Date getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }    

    public Date getFifoTime() {
        return fifoTime;
    }

    public void setFifoTime(Date fifoTime) {
        this.fifoTime = fifoTime;
    }

    public Float getWorkTime() {
        return workTime;
    }

    public void setWorkTime(Float workTime) {
        this.workTime = workTime;
    }        

    public int getCreateId() {
        return createId;
    }

    public void setCreateId(int createId) {
        this.createId = createId;
    }

    public int getWriteId() {
        return writeId;
    }

    public void setWriteId(int writeId) {
        this.writeId = writeId;
    }

    public String getPalletNumber() {
        return palletNumber;
    }

    public void setPalletNumber(String palletNumber) {
        this.palletNumber = palletNumber;
    }

    public String getHarnessPart() {
        return harnessPart;
    }

    public void setHarnessPart(String harnessPart) {
        this.harnessPart = harnessPart;
    }

    public String getHarnessIndex() {
        return harnessIndex;
    }

    public void setHarnessIndex(String harnessIndex) {
        this.harnessIndex = harnessIndex;
    }

    public String getSupplierPartNumber() {
        return supplierPartNumber;
    }

    public void setSupplierPartNumber(String supplierPartNumber) {
        this.supplierPartNumber = supplierPartNumber;
    }

    public int getQtyExpected() {
        return qtyExpected;
    }

    public void setQtyExpected(int qtyExpected) {
        this.qtyExpected = qtyExpected;
    }

    public int getQtyRead() {
        return qtyRead;
    }

    public void setQtyRead(int qtyRead) {
        this.qtyRead = qtyRead;
    }

    public String getPackType() {
        return packType;
    }

    public void setPackType(String packType) {
        this.packType = packType;
    }

    public String getHarnessType() {
        return harnessType;
    }

    public void setHarnessType(String harnessType) {
        this.harnessType = harnessType;
    }

    public String getContainerState() {
        return containerState;
    }

    public void setContainerState(String containerState) {
        this.containerState = containerState;
    }

    public String getContainerStateCode() {
        return containerStateCode;
    }

    public void setContainerStateCode(String containerStateCode) {
        this.containerStateCode = containerStateCode;
    }

    public String getFeedback() {
        return feedback;
    }

    public void setFeedback(String feedback) {
        this.feedback = feedback;
    }

    public String getUser() {
        return user;
    }

    public void setUser(String user) {
        this.user = user;
    }

    public String getCreateUser() {
        return createUser;
    }

    public void setCreateUser(String createUser) {
        this.createUser = createUser;
    }
        

    /**
     * Parse BaseContainer object to HisBaseContainer object
     *
     * @param bc BaseContainer object
     * @param feedback Feedback string
     * @return HisBaseContainer object
     */
    public HisBaseContainer parseContainerData(BaseContainer bc, String feedback) {

        HisBaseContainer hbc = new HisBaseContainer();
        try {
            hbc.setContainerState(bc.getContainerState());
            hbc.setContainerStateCode(bc.getContainerStateCode());
            hbc.setCreateId(bc.getCreateId());
            hbc.setCreateTime(new Date());
            hbc.setHarnessIndex(bc.getHarnessIndex());
            hbc.setHarnessPart(bc.getHarnessPart());
            hbc.setHarnessType(bc.getHarnessType());
            hbc.setPackType(bc.getPackType());
            hbc.setPalletNumber(bc.getPalletNumber());
            hbc.setQtyExpected(bc.getQtyExpected());
            hbc.setQtyRead(bc.getQtyRead());
            hbc.setSupplierPartNumber(bc.getSupplierPartNumber());
            hbc.setUser(bc.getUser());
            hbc.setCreateUser(bc.getCreateUser());
            hbc.setWriteId(bc.getWriteId());            
            hbc.setFifoTime(bc.getFifoTime());
            hbc.setWorkTime(                    
                    Float.valueOf(GlobalMethods.DiffInMinutes(new Date(), bc.getFifoTime()))
            );
            if (feedback != null) {
                hbc.setFeedback(feedback);
            } else {
                hbc.setFeedback("-");
            }

        } catch (Exception e) {
            System.out.println("parseContainerData ERROR " + e.getMessage());
            System.out.println(bc.toString());
        }
        return hbc;
    }
    
    /**
     * Parse DropBaseContainer object to HisBaseContainer object
     * Used in droping case.
     * @param bc DropBaseContainer object
     * @param feedback Feedback string
     * @return HisBaseContainer object
     */
    public HisBaseContainer parseDropContainerData(DropBaseContainer bc, String feedback) {

        HisBaseContainer hbc = new HisBaseContainer();
        try {
            hbc.setContainerState(GlobalVars.PALLET_DROPPED);
            hbc.setContainerStateCode(GlobalVars.PALLET_DROPPED_CODE);
            hbc.setCreateId(bc.getCreateId());
            hbc.setCreateTime(new Date());
            hbc.setHarnessIndex(bc.getHarnessIndex());
            hbc.setHarnessPart(bc.getHarnessPart());
            hbc.setHarnessType(bc.getHarnessType());
            hbc.setPackType(bc.getPackType());
            hbc.setPalletNumber(bc.getPalletNumber());
            hbc.setQtyExpected(bc.getQtyExpected());
            hbc.setQtyRead(bc.getQtyRead());
            hbc.setSupplierPartNumber(bc.getSupplierPartNumber());
            hbc.setUser(PackagingVars.context.getUser().getLogin());
            hbc.setCreateUser(PackagingVars.context.getUser().getFirstName() + " " + PackagingVars.context.getUser().getLastName());
            hbc.setWriteId(bc.getWriteId());
            hbc.setFifoTime(new Date());            
            hbc.setWorkTime(                    
                    Float.valueOf(GlobalMethods.DiffInMinutes(new Date(), bc.getWriteTime()))
            );
            if (feedback != null) {
                hbc.setFeedback(feedback);
            } else {
                hbc.setFeedback("-");
            }

        } catch (Exception e) {
            System.out.println("parseDropContainerData ERROR " + e.getMessage());
            System.out.println(bc.toString());
        }
        return hbc;
    }

}
